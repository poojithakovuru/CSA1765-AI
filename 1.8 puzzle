from collections import deque

def solve_puzzle(start, goal):
    queue = deque([(start, [])])  # Queue with (state, path)
    visited = set()  # Track visited states
    while queue:
        state, path = queue.popleft()
        if state == goal:
            return path + [state]
        visited.add(state)
        zero = state.index(0)
        for move in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Up, Down, Left, Right
            x, y = divmod(zero, 3)
            nx, ny = x + move[0], y + move[1]
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = list(state)
                new_zero = nx * 3 + ny
                new_state[zero], new_state[new_zero] = new_state[new_zero], new_state[zero]
                new_state = tuple(new_state)
                if new_state not in visited:
                    queue.append((new_state, path + [state]))

# Example usage
start = (1, 2, 3, 4, 5, 6, 7, 0, 8)  # Start state
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)   # Goal state
solution = solve_puzzle(start, goal)
for step in solution:
    print(step[:3], step[3:6], step[6:], sep="\n")
    print()
